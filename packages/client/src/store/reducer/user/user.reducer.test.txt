//https://bionicjulia.com/blog/writing-jest-tests-redux-toolkit-slice


// import { initialStateUser } from './user.const';
// import { userSlice, fetchVerifyUser, fetchUserByID, fetchLogoutUser } from './user.reducer';

// describe('userSlice', () => {
//   it('should handle initial state', () => {
//     expect(userSlice.reducer(undefined, {} as any)).toEqual(initialStateUser);
//   });

//   it('should handle setUser', () => {
//     const previousState = { ...initialStateUser };
//     const payload = { user: { id: 1, name: 'John Doe' } };
//     const action = { type: 'user/setUser', payload };
//     const expectedState = { ...previousState, user: payload.user, isAuth: true, isLoading: false };
//     console.log(userSlice.reducer(previousState, action));
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle setUserError', () => {
//     const previousState = { ...initialStateUser };
//     const payload = 'Invalid username or password';
//     const action = { type: 'user/setUserError', payload };
//     const expectedState = { ...previousState, error: payload };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchVerifyUser/pending', () => {
//     const previousState = { ...initialStateUser };
//     const action = { type: fetchVerifyUser.pending.type };
//     const expectedState = { ...previousState, isLoading: true, error: '' };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchVerifyUser/fulfilled', () => {
//     const previousState = { ...initialStateUser };
//     const payload = { id: 1, name: 'John Doe' };
//     const action = { type: fetchVerifyUser.fulfilled.type, payload };
//     const expectedState = { ...previousState, user: payload, isAuth: true, isLoading: false };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchVerifyUser/rejected', () => {
//     const previousState = { ...initialStateUser };
//     const error = { message: 'Unauthorized' };
//     const action = { type: fetchVerifyUser.rejected.type, error };
//     const expectedState = { ...previousState, error: error.message, isLoading: false };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchLogoutUser/pending', () => {
//     const previousState = { ...initialStateUser, isAuth: true };
//     const action = { type: fetchLogoutUser.pending.type };
//     const expectedState = { ...previousState, error: '' };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchLogoutUser/fulfilled', () => {
//     const previousState = { ...initialStateUser, isAuth: true };
//     const action = { type: fetchLogoutUser.fulfilled.type };
//     const expectedState = { ...previousState, isAuth: false, user: undefined };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });

//   it('should handle fetchLogoutUser/rejected', () => {
//     const previousState = { ...initialStateUser, isAuth: true };
//     const error = { message: 'Something went wrong' };
//     const action = { type: fetchLogoutUser.rejected.type, error };
//     const expectedState = { ...previousState, error: error.message };
//     expect(userSlice.reducer(previousState, action)).toEqual(expectedState);
//   });
// });

